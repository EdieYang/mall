package com.linkpets.dao;

import com.alibaba.fastjson.JSONObject;
import com.linkpets.model.ActivityCommodity;
import com.linkpets.model.ActivityCommodityKey;

import java.util.List;

import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.ResultMap;
import org.apache.ibatis.annotations.ResultType;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;

public interface ActivityCommodityMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table activity_commodity
     *
     * @mbg.generated Wed Oct 09 18:42:14 GMT+08:00 2019
     */
    @Delete({
        "delete from activity_commodity",
        "where activity_id = #{activityId,jdbcType=VARCHAR}",
          "and commodity_id = #{commodityId,jdbcType=VARCHAR}"
    })
    int deleteByPrimaryKey(ActivityCommodityKey key);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table activity_commodity
     *
     * @mbg.generated Wed Oct 09 18:42:14 GMT+08:00 2019
     */
    @Insert({
        "insert into activity_commodity (activity_id, commodity_id, ",
        "activity_price, total_limit, ",
        "per_limit, activity_inventory)",
        "values (#{activityId,jdbcType=VARCHAR}, #{commodityId,jdbcType=VARCHAR}, ",
        "#{activityPrice,jdbcType=DECIMAL}, #{totalLimit,jdbcType=INTEGER}, ",
        "#{perLimit,jdbcType=INTEGER}, #{activityInventory,jdbcType=INTEGER})"
    })
    int insert(ActivityCommodity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table activity_commodity
     *
     * @mbg.generated Wed Oct 09 18:42:14 GMT+08:00 2019
     */
    int insertSelective(ActivityCommodity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table activity_commodity
     *
     * @mbg.generated Wed Oct 09 18:42:14 GMT+08:00 2019
     */
    @Select({
        "select",
        "activity_id, commodity_id, activity_price, total_limit, per_limit, activity_inventory",
        "from activity_commodity",
        "where activity_id = #{activityId,jdbcType=VARCHAR}",
          "and commodity_id = #{commodityId,jdbcType=VARCHAR}"
    })
    @ResultMap("com.linkpets.dao.ActivityCommodityMapper.BaseResultMap")
    ActivityCommodity selectByPrimaryKey(ActivityCommodityKey key);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table activity_commodity
     *
     * @mbg.generated Wed Oct 09 18:42:14 GMT+08:00 2019
     */
    int updateByPrimaryKeySelective(ActivityCommodity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table activity_commodity
     *
     * @mbg.generated Wed Oct 09 18:42:14 GMT+08:00 2019
     */
    @Update({
        "update activity_commodity",
        "set activity_price = #{activityPrice,jdbcType=DECIMAL},",
          "total_limit = #{totalLimit,jdbcType=INTEGER},",
          "per_limit = #{perLimit,jdbcType=INTEGER},",
          "activity_inventory = #{activityInventory,jdbcType=INTEGER}",
        "where activity_id = #{activityId,jdbcType=VARCHAR}",
          "and commodity_id = #{commodityId,jdbcType=VARCHAR}"
    })
    int updateByPrimaryKey(ActivityCommodity record);
    
    @Select({
    	"SELECT ",
	    	"t_ac.activity_id AS activityId,",
	    	"t_ac.commodity_id AS commodityId,",
	    	"t_c.commodity_name AS commodityName,",
	    	"t_ac.activity_price AS activityPrice,",
	    	"t_ac.total_limit AS totalLimit,",
	    	"t_ac.per_limit AS perLimit,",
	    	"t_ac.activity_inventory AS activityInventory,",
	    	"t_c.inventory ",
    	"FROM activity_commodity t_ac ",
	    	"LEFT JOIN commodity_info t_c ",
	    	"ON t_ac.commodity_id = t_c.commodity_id",
    	"where t_ac.activity_id = #{activityId,jdbcType=VARCHAR}"
    })
    @ResultType(JSONObject.class)
    List<JSONObject> getCommodityList(String activityId);
	
	@Delete({
        "delete from activity_commodity",
        "where activity_id = #{activityId,jdbcType=VARCHAR}"
    })
	int delCommodity(String activityId);
}